rule all_demux:
    input:
        TARGET_DEMUX

rule gzip_demux:
    input:
        DEMUX_DIR + "/{sample}_{direction}.fastq"
    params:
        DEMUX_DIR
    output:
        DEMUX_DIR + "/{sample}_{direction}.fastq.gz"
    shell:
        """
        mkdir -p {params}
        gzip -c {input} > {output}
        rm {input}
        """

rule run_dnabc:
    input:
        R1 = config["all"]["mux_dir"] + "/Undetermined_S0_L001_R1_001_trimmed.fastq.gz",
        R2 = config["all"]["mux_dir"] + "/Undetermined_S0_L001_R2_001_trimmed.fastq.gz"
    params:
        demux_dir = DEMUX_DIR,
        mismatch = config["demux"]["mismatch"],
        revcomp = config["demux"]["revcomp"]
    output:
        manifest_fp = PROJECT_DIR + "/manifest.csv",
        total_reads_fp = PROJECT_DIR + "/total_read_counts.tsv",
        demux_fastq = expand(DEMUX_DIR + "/{sample}_{direction}.fastq", sample = SAMPLE_IDS, direction = ["R1", "R2"])
    run:
        if params.revcomp:
            shell("""
            mkdir -p {params.demux_dir}
            touch {output.demux_fastq}
            dnabc.py \
            --revcomp \
            --output-dir {params.demux_dir} \
            --mismatches {params.mismatch} \
            --manifest-file {output.manifest_fp} \
            --total-reads-file {output.total_reads_fp} \
            {MAPPING_FP} {input.R1} {input.R2}
            """)
        else:
            shell("""
            mkdir -p {params.demux_dir}
            touch {output.demux_fastq}
            dnabc.py \
            --output-dir {params.demux_dir} \
            --mismatches {params.mismatch} \
            --manifest-file {output.manifest_fp} \
            --total-reads-file {output.total_reads_fp} \
            {MAPPING_FP} {input.R1} {input.R2}
            """)

rule gzip_trimmed:
  input:
    expand(config["all"]["mux_dir"] + "/Undetermined_S0_L001_{direction}_001_trimmed.fastq", direction = ["R1", "R2"])
  output:
    config["all"]["mux_dir"] + "/Undetermined_S0_L001_{direction}_001_trimmed.fastq.gz"
  params:
    gunz = config["all"]["mux_dir"] + "/Undetermined_S0_L001_{direction}_001_trimmed.fastq",
    gz = config["all"]["mux_dir"] + "/Undetermined_S0_L001_{direction}_001_trimmed.fastq.gz"
  shell:
    """
    gzip -c {params.gunz} > {params.gz} && \
    rm {params.gunz}
    """

rule trim_primers:
  input:
    expand(config["all"]["mux_dir"] + "/Undetermined_S0_L001_{index}_001.fastq", index = ["R1", "R2", "I1", "I2"])
  output:
    expand(config["all"]["mux_dir"] + "/Undetermined_S0_L001_{index_3}_001_trimmed.fastq", index_3 = ["R1", "R2", "I1"])
  params:
    config["all"]["mux_dir"]
  shell:
    """
    python scripts/discard_bad_reads.py --dir {params}
    """

rule gunzip_untrimmed:
  input:
    expand(config["all"]["mux_dir"] + "/Undetermined_S0_L001_{index}_001.fastq.gz", index = ["R1", "R2", "I1", "I2"])
  params:
    gz = config["all"]["mux_dir"] + "/Undetermined_S0_L001_{index}_001.fastq.gz",
    gunz = config["all"]["mux_dir"] + "/Undetermined_S0_L001_{index}_001.fastq"
  output:
    config["all"]["mux_dir"] + "/Undetermined_S0_L001_{index}_001.fastq"
  shell:
    """
    gunzip -c {params.gz} > {params.gunz} && \
    rm {params.gz}
    """
